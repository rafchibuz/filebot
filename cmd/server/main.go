package main

import (
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/joho/godotenv"
	"wildberries-order-service/internal/config"
	"wildberries-order-service/internal/handlers"
	"wildberries-order-service/internal/kafka"
	"wildberries-order-service/internal/models"
	"wildberries-order-service/internal/repository"
	"wildberries-order-service/internal/service"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found, using system environment variables")
	}
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	var orderRepo models.OrderRepository
	var err error
	
	// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º memory
	postgresRepo, err := repository.NewPostgresOrderRepository(cfg.Database.GetConnectionString())
	if err != nil {
		log.Printf("‚ö†Ô∏è  Failed to connect to PostgreSQL: %v", err)
		log.Println("üîÑ Falling back to memory repository")
		orderRepo = repository.NewMemoryOrderRepository()
	} else {
		log.Println("üêò Using PostgreSQL repository")
		orderRepo = postgresRepo
		
		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown –¥–ª—è PostgreSQL
		defer func() {
			if pgRepo, ok := postgresRepo.(*repository.PostgresOrderRepository); ok {
				pgRepo.Close()
			}
		}()
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
	orderService := service.NewOrderService(orderRepo)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer
	kafkaConsumer, err := kafka.NewConsumer(&cfg.Kafka, orderService)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Failed to create Kafka consumer: %v", err)
		log.Println("üîÑ Continuing without Kafka consumer")
	} else if kafkaConsumer != nil {
		// –ó–∞–ø—É—Å–∫–∞–µ–º consumer
		if err := kafkaConsumer.Start(); err != nil {
			log.Printf("‚ö†Ô∏è  Failed to start Kafka consumer: %v", err)
		}
		
		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown –¥–ª—è Kafka
		defer kafkaConsumer.Stop()
	}
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	orderHandler := handlers.NewOrderHandler(orderService)
	webHandler := handlers.NewWebHandler()
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	setupRoutes(orderHandler, webHandler)
	
	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := cfg.Server.Port
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Printf("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:%s", port)
	log.Printf("üîç API endpoint: http://localhost:%s/order/{order_id}", port)
	log.Printf("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã: http://localhost:%s/orders", port)
	log.Printf("‚ù§Ô∏è  Health check: http://localhost:%s/health", port)
	log.Printf("üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: b563feb7b2b84b6test")
	log.Printf("üóÑÔ∏è  Database: %s:%d", cfg.Database.Host, cfg.Database.Port)
	
	// Graceful shutdown
	setupGracefulShutdown()
	
	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}

// setupRoutes –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã HTTP —Å–µ—Ä–≤–µ—Ä–∞
func setupRoutes(orderHandler *handlers.OrderHandler, webHandler *handlers.WebHandler) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		log.Printf("Request: %s %s", r.Method, r.URL.Path)
		
		switch r.URL.Path {
		case "/":
			log.Printf("Serving home page")
			webHandler.Home(w, r)
		case "/health":
			log.Printf("Serving health check")
			webHandler.Health(w, r)
		case "/orders":
			log.Printf("Serving orders list")
			orderHandler.GetAllOrders(w, r)
		default:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å /order/
			if len(r.URL.Path) > 7 && r.URL.Path[:7] == "/order/" {
				log.Printf("Serving single order")
				orderHandler.GetOrder(w, r)
			} else if r.URL.Path == "/order" {
				if r.Method == http.MethodPost {
					log.Printf("Creating order")
					orderHandler.CreateOrder(w, r)
				} else {
					log.Printf("Invalid order request")
					w.Header().Set("Content-Type", "application/json")
					w.WriteHeader(http.StatusBadRequest)
					w.Write([]byte(`{"error":"Order ID is required. Use /order/{id} for GET requests"}`))
				}
			} else {
				// 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
				log.Printf("Unknown path: %s", r.URL.Path)
				w.Header().Set("Content-Type", "application/json")
				w.WriteHeader(http.StatusNotFound)
				w.Write([]byte(`{"error":"Endpoint not found"}`))
			}
		}
	})
}

// getPort –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func getPort() string {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8081"
	}
	return port
}

// setupGracefulShutdown –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç graceful shutdown
func setupGracefulShutdown() {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	
	go func() {
		<-c
		log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
		// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
		// (–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç.–¥.)
		os.Exit(0)
	}()
}